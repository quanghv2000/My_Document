{"version":3,"sources":["Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","state","txtScreen","operator","process","firstNumber","secondNumber","result","onClickButtonAC","setState","onClickButtonInverse","number","parseFloat","toString","onClickButtonPercent","onClickButtonOperator","onClickButtonNumber","txtNew","textCurrent","length","onClickButtonDot","includes","onClickButtonDelete","substr","onClickButtonEqual","className","id","this","onClick","xmlns","width","height","fill","viewBox","d","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.271b3f32.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nexport default class Calculator extends Component {\r\n    state = {\r\n        txtScreen: '0',\r\n        operator: '',\r\n        process: false,\r\n        firstNumber: 0,\r\n        secondNumber: 0,\r\n        result: 0,\r\n    }\r\n\r\n    onClickButtonAC = () => {\r\n        let stateReset = {\r\n            txtScreen: '0',\r\n            operator: '',\r\n            process: false,\r\n            firstNumber: 0,\r\n            secondNumber: 0,\r\n            result: 0,\r\n        }\r\n        this.setState(stateReset);\r\n    }\r\n\r\n    onClickButtonInverse = () => {\r\n        let number = parseFloat(this.state.txtScreen);\r\n        let result = parseFloat(number / -1);\r\n        this.setState(\r\n            {\r\n                txtScreen: result.toString(),\r\n                process: true,\r\n                firstNumber: result,\r\n            }\r\n        )\r\n    }\r\n\r\n    onClickButtonPercent = () => {\r\n        let number = parseFloat(this.state.txtScreen);\r\n        let result = parseFloat(number / 100);\r\n        this.setState(\r\n            {\r\n                txtScreen: result.toString(),\r\n                process: true,\r\n                firstNumber: result,\r\n            }\r\n        )\r\n    }\r\n\r\n    onClickButtonOperator = (operator) => {\r\n        this.setState({\r\n            operator: operator,\r\n            firstNumber: parseFloat(this.state.txtScreen),\r\n            process: true,\r\n        });\r\n    }\r\n\r\n    onClickButtonNumber = (number) => {\r\n        let txtNew = '0';\r\n        let process = this.state.process;\r\n        if (process === true) {\r\n            txtNew = number;\r\n        } else {\r\n            let textCurrent = this.state.txtScreen;\r\n            if (textCurrent.length < 13) {\r\n                if (textCurrent === '0') {\r\n                    txtNew = number;\r\n                } else {\r\n                    txtNew = textCurrent + number;\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                txtScreen: txtNew,\r\n                process: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    onClickButtonDot = () => {\r\n        let txtNew = '0';\r\n        let process = this.state.process;\r\n        if (process === true) {\r\n            txtNew = '0.';\r\n        } else {\r\n            let textCurrent = this.state.txtScreen;\r\n            if (textCurrent.includes('.')) {\r\n                txtNew = textCurrent;\r\n            } else {\r\n                txtNew = textCurrent +'.';\r\n            }\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                txtScreen: txtNew,\r\n                process: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    onClickButtonDelete = () => {\r\n        let textCurrent = this.state.txtScreen;\r\n        let txtNew = '';\r\n        if (textCurrent.length > 1) {\r\n            txtNew = textCurrent.substr(0, textCurrent.length - 1);\r\n        } else {\r\n            txtNew = '0';\r\n        }\r\n        this.setState(\r\n            {\r\n                txtScreen: txtNew,\r\n            }\r\n        )\r\n    }\r\n\r\n    onClickButtonEqual = () => {\r\n        let operator = this.state.operator;\r\n        let firstNumber = this.state.firstNumber;\r\n        let result = '0';\r\n        if (operator === '') {\r\n            return;\r\n        } else {\r\n            let secondNumber = this.state.txtScreen;\r\n            switch(operator) {\r\n                case '+': result = parseFloat(firstNumber) + parseFloat(secondNumber); break;\r\n                case '-': result = parseFloat(firstNumber) - parseFloat(secondNumber); break;\r\n                case '*': result = parseFloat(firstNumber) * parseFloat(secondNumber); break;\r\n                case '/': result = parseFloat(firstNumber) / parseFloat(secondNumber); break;\r\n                default: return;\r\n            }\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                txtScreen: result,\r\n                firstNumber: parseFloat(result),\r\n                process: true,\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"screen\" id=\"input\">{this.state.txtScreen}</div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-3\">\r\n                            <div className=\"btn light-gray\" onClick={() => { this.onClickButtonAC() }}>AC</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('7') }}>7</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('4') }}>4</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('1') }}>1</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('0') }}>0</div>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <div className=\"btn light-gray\" onClick={() => { this.onClickButtonInverse() }}>+/-</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('8') }}>8</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('5') }}>5</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('2') }}>2</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonDot() }}>.</div>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <div className=\"btn light-gray\" onClick={() => { this.onClickButtonPercent() }}>%</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('9') }}>9</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('6') }}>6</div>\r\n                            <div className=\"btn\" onClick={() => { this.onClickButtonNumber('3') }}>3</div>\r\n                            <div className=\"btn btnDelete\" onClick={() => { this.onClickButtonDelete() }}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" className=\"bi bi-backspace\" viewBox=\"0 0 16 16\">\r\n                                <path d=\"M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z\" />\r\n                                <path d=\"M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-7.08z\" />\r\n                            </svg></div>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <div className=\"btn btn-orange\" onClick={() => { this.onClickButtonOperator('/')} }>/</div>\r\n                            <div className=\"btn btn-orange\" onClick={() => { this.onClickButtonOperator('*')} }>*</div>\r\n                            <div className=\"btn btn-orange\" onClick={() => { this.onClickButtonOperator('-')} }>-</div>\r\n                            <div className=\"btn btn-orange\" onClick={() => { this.onClickButtonOperator('+')} }>+</div>\r\n                            <div className=\"btn btn-equal\" onClick={() => { this.onClickButtonEqual() }}>=</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Calculator from './Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}